{"version":3,"sources":["api/service.js","component/Filter.js","component/Pagination.js","component/DataTable.js","fontawesome.js","App.js","serviceWorker.js","index.js"],"names":["API","by","arguments","length","undefined","fetch","concat","then","resp","json","data","catch","err","Error","Filter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","viewOptions","sortByOptions","closeFilterPanel","bind","assertThisInitialized","closeState","onCloseFilter","e","console","log","onSortyBy","target","value","onUpdateViewItems","_this2","react_default","a","createElement","className","cssClassname","href","onClick","index_es","icon","onSubmit","htmlFor","id","onChange","handleViewItems","map","option","i","key","handleSortBy","Component","Pagination","state","gotoPageNo","totalRecords","defaultItems","prevCnt","nextCnt","currentPage","handlePrevious","handleNext","handlePage","gotoPage","handlePageInputChange","handlePageInputKeyDown","val","setState","parseFloat","keyCode","_ref","_this$props$onSetNewG","onSetNewGridRecords","f","_this$state","_this$state2","_this$state3","gridData","pagination","_this$state4","type","name","onKeyDown","maxLength","DataTable","dataTableRecords","viewItems","direction","ID","Title","PageCount","PublishDate","setNewGridRecords","sortBy","updateViewItems","clear","replace","sortedData","sort","b","_a$key$split","split","_a$key$split2","slicedToArray","aLast","_a$key$split3","_a$key$split4","bLast","_a$key$split5","_a$key$split6","_a$key$split7","_a$key$split8","toLowerCase","component_Filter","isFilterTrigged","slice","newGridData","component_Pagination","width","item","Description","Date","getFullYear","renderFilter","renderTable","library","add","fab","faCoffee","faCog","faMugHot","faVials","faTimes","faCaretUp","faCaretDown","App","flashOut","heading","title","fetchedData","showFilter","closeFilter","flashHeader","fetchData","res","closedStatus","document","querySelector","classList","_this3","component_DataTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b605edc.chunk.js","sourcesContent":["class API {\r\n    static fetchData(by= 'Books') {\r\n        if (by) {\r\n            const req = fetch(`https://fakerestapi.azurewebsites.net/api/${by}`)\r\n                .then(resp => resp.json()).then(data => {\r\n                   return data ? data: ['no data found!'];\r\n                })\r\n                .catch(err => new Error(err));\r\n            return req\r\n        }\r\n    }\r\n}\r\n\r\nexport default API;","import React, { Component } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nclass Filter extends Component {\r\n  viewOptions = [5, 10, 15, 20, 30, 40, 'All'];\r\n  sortByOptions = ['Title', 'Description', 'Page Count', 'Date'];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.closeFilterPanel = this.closeFilterPanel.bind(this);\r\n  }\r\n  \r\n  closeFilterPanel(closeState) {\r\n    this.props.onCloseFilter(closeState);\r\n  }\r\n\r\n  handleSortBy(e) {\r\n    console.log(e);\r\n    this.props.onSortyBy(e.target.value);\r\n  }\r\n\r\n  handleViewItems(e) {\r\n    console.log(e);\r\n    this.props.onUpdateViewItems(e.target.value);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className={`filter-panel ${this.props.cssClassname}`}>\r\n        <a href=\"#\" className=\"close\" onClick={() => {\r\n          this.closeFilterPanel(false)\r\n        }}>\r\n          <FontAwesomeIcon icon=\"times\" /></a>\r\n        <h3>Filter</h3>\r\n\r\n        <form onSubmit={() => false}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"viewItemsControl\">View items</label>\r\n            <select className=\"form-control\" id=\"viewItemsControl\" onChange={(e) => this.handleViewItems(e)}>\r\n              <option>Select</option>\r\n              {\r\n                this.viewOptions.map((option, i) => {\r\n                  return (<option key={i} value={option}>{option}</option>)\r\n                })\r\n              }\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"soryByControl\">Sort By</label>\r\n            <select className=\"form-control\" id=\"soryByControl\" onChange={(e) => this.handleSortBy(e)}>\r\n              <option>Select</option>\r\n              {\r\n                this.sortByOptions.map((option, i) => {\r\n                  return (<option key={i} value={option}>{option}</option>)\r\n                })\r\n              }\r\n            </select>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Filter;\r\n","import React, { Component } from 'react';\r\n\r\nclass Pagination extends Component {\r\n    state = {\r\n        gotoPageNo: '',\r\n        totalRecords: 0,\r\n        defaultItems: 0,\r\n        prevCnt: 0,\r\n        nextCnt: 0,\r\n        currentPage: 1\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handlePrevious = this.handlePrevious.bind(this);\r\n        this.handleNext = this.handleNext.bind(this);\r\n        this.handlePage = this.handlePage.bind(this);\r\n        this.gotoPage = this.gotoPage.bind(this);\r\n        this.handlePageInputChange = this.handlePageInputChange.bind(this);\r\n        this.handlePageInputKeyDown = this.handlePageInputKeyDown.bind(this);\r\n        \r\n    }\r\n\r\n    handlePageInputChange(e) {\r\n        const val = e.target.value;\r\n        //console.log(val);\r\n        if (val.length)\r\n            this.setState({ gotoPageNo: parseFloat(val) });\r\n        else \r\n            this.setState({ gotoPageNo: '' });\r\n    }\r\n\r\n    handlePageInputKeyDown(e) {\r\n        const keyCode = e.keyCode;\r\n        //console.log(keyCode);\r\n\r\n        if(keyCode === 13) {\r\n            this.gotoPage();\r\n        }\r\n    }\r\n\r\n    handlePage({ prevCnt, nextCnt } = {}) {\r\n        const { onSetNewGridRecords = f => f } = this.props;\r\n        onSetNewGridRecords({prevCnt, nextCnt});\r\n    }\r\n\r\n    gotoPage() {\r\n        //console.log('go to page ');\r\n        const { totalRecords, gotoPageNo, defaultItems, currentPage } = this.state;\r\n\r\n        if (gotoPageNo && gotoPageNo <= (totalRecords/defaultItems)) {\r\n            const prevCnt = (gotoPageNo - 1) * defaultItems;\r\n            const nextCnt =  (gotoPageNo * defaultItems);\r\n\r\n            this.setState({ currentPage: gotoPageNo, prevCnt, nextCnt });\r\n            this.handlePage({ prevCnt, nextCnt });\r\n        } else {\r\n            //console.error('Sorry, no page exists');\r\n        }\r\n    }\r\n\r\n    handlePrevious() {\r\n        //console.clear();\r\n        //console.log('Previous Trigger ');\r\n        let { prevCnt, nextCnt, defaultItems, currentPage } = this.state;\r\n        if (prevCnt > 0) {\r\n            prevCnt = parseFloat(prevCnt) - defaultItems;\r\n            nextCnt = parseFloat(nextCnt) - defaultItems;\r\n            currentPage = currentPage - 1;\r\n            this.setState({ prevCnt, nextCnt, currentPage, gotoPageNo: '' });\r\n            this.handlePage({ prevCnt, nextCnt });\r\n        }\r\n    }\r\n\r\n    handleNext() {\r\n        //console.clear();\r\n        //console.log('Next Trigger ');\r\n        let { prevCnt, nextCnt, defaultItems, currentPage, totalRecords } = this.state;\r\n\r\n        if (nextCnt < totalRecords) {\r\n            prevCnt = parseFloat(prevCnt) + defaultItems;\r\n            nextCnt = parseFloat(prevCnt) + defaultItems;\r\n            currentPage = currentPage + 1;\r\n            this.setState({ prevCnt, nextCnt, currentPage, gotoPageNo: '' });\r\n            this.handlePage({ prevCnt, nextCnt });\r\n\r\n        } else {\r\n            nextCnt = totalRecords;\r\n            this.setState({ nextCnt });\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        const totalRecords = this.props.gridData.length;\r\n        const pagination = this.state;\r\n       \r\n        pagination.totalRecords = totalRecords;\r\n        pagination.defaultItems = this.props.defaultItems;\r\n\r\n        this.setState({ pagination });\r\n    }\r\n\r\n    render() {\r\n        const { totalRecords, defaultItems, currentPage, prevCnt, nextCnt, gotoPageNo } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"tabular-info clearfix\">\r\n                    <h5 className=\"float-left\"><span>{totalRecords}</span> books in store.</h5>\r\n                    <h6 className=\"float-left\"><span>Page {`${currentPage}/${(totalRecords / defaultItems)}`}</span></h6>\r\n                    <div className=\"float-right col-4\">\r\n                        <div className=\"input-group input-group-sm float-right\">\r\n                            <input type=\"text\" name=\"gotoPageInput\" className=\"form-control goto-input\"\r\n                                value={gotoPageNo}\r\n                                onChange={this.handlePageInputChange}\r\n                                onKeyDown={this.handlePageInputKeyDown}\r\n                                maxLength={5}\r\n                            />\r\n                            <div className=\"input-group-append\">\r\n                                <button onClick={this.gotoPage} name=\"gotoPageButton\" className=\"btn btn-outline-secondary\" type=\"button\">Go</button>\r\n                            </div>\r\n                        </div>\r\n                        <ul className=\"pagination pagination-sm float-right\">\r\n                            <li className={!prevCnt ? 'page-item disabled' : 'page-item'}>\r\n                                <a className=\"page-link\" href=\"#\" onClick={() => this.handlePrevious()}>Previous</a>\r\n                            </li>\r\n                            <li className={nextCnt === totalRecords ? 'page-item disabled' : 'page-item'}>\r\n                                <a className=\"page-link\" href=\"#\" onClick={() => this.handleNext()}>Next</a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pagination;\r\n","import React, { Component } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Filter from './Filter';\r\nimport Pagination from './Pagination';\r\n\r\nclass DataTable extends Component {\r\n    state = {\r\n        gridData: [],\r\n        dataTableRecords: [],\r\n        totalRecords: 0,\r\n        viewItems: 0,\r\n        direction: {\r\n            ID: 'desc',\r\n            Title: 'desc',\r\n            PageCount: 'desc',\r\n            PublishDate: 'desc',\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setNewGridRecords = this.setNewGridRecords.bind(this);\r\n        this.sortBy = this.sortBy.bind(this);\r\n        this.updateViewItems = this.updateViewItems.bind(this);\r\n    }\r\n\r\n    sortBy(type) {\r\n        console.clear();\r\n\r\n        let key = type !== '' ? type.replace(/ /gi, '') : null;\r\n        if (!key) return;\r\n\r\n        //console.log('sortBy type ', type, 'direction', this.state.direction[type]);\r\n\r\n        const { dataTableRecords, direction } = this.state;\r\n        let sortedData = [];\r\n        switch (key) {\r\n            case 'Title':\r\n                sortedData = (direction && direction[key] === 'asc' ?\r\n                    dataTableRecords.sort((a, b) => {\r\n                        const [aLast, aFirst] = a[key].split(' ');\r\n                        const [bLast, bFirst] = a[key].split(' ');\r\n\r\n                        return aLast > bLast ? 1 : -1;\r\n                    }) : dataTableRecords.sort((a, b) => {\r\n                        const [aLast, aFirst] = a[key].split(' ');\r\n                        const [bLast, bFirst] = a[key].split(' ');\r\n\r\n                        return bLast > aLast ? 1 : -1;\r\n                    }))\r\n\r\n                this.setState({ dataTableRecords: sortedData });\r\n                break;\r\n\r\n            default:\r\n                sortedData = (direction && direction[key] === 'asc' ?\r\n                    dataTableRecords.sort((a, b) => {\r\n                        return a[key] > b[key] ? 1 : -1;\r\n                    }) : dataTableRecords.sort((a, b) =>{\r\n                        return b[key] > a[key] ? 1 :-1;\r\n                    }));\r\n                this.setState({ dataTableRecords: sortedData });\r\n                break;\r\n        }\r\n        \r\n        direction[key] = direction[key] === 'asc' ? 'desc' : 'asc';\r\n        this.setState({ direction });\r\n\r\n    }\r\n\r\n    updateViewItems(val) {\r\n        if (val && val !== '') {\r\n            if (typeof val !== \"number\" && val.toLowerCase() === 'all') {\r\n                const nextCnt = this.state.totalRecords;\r\n                this.setNewGridRecords({ prevCnt: 0, nextCnt });\r\n                this.setState({ viewItems: nextCnt });\r\n            } else {\r\n                this.setNewGridRecords({ prevCnt: 0, nextCnt: parseFloat(val) });\r\n                this.setState({ viewItems: val });\r\n            }\r\n        }\r\n    }\r\n\r\n    renderFilter() {\r\n        return (\r\n            <Filter\r\n                cssClassname={this.props.isFilterTrigged ? 'active' : ''}\r\n                onCloseFilter={this.props.onCloseFilter}\r\n                onSortyBy={this.sortBy}\r\n                onUpdateViewItems={this.updateViewItems}\r\n            />\r\n\r\n        );\r\n    }\r\n\r\n    setNewGridRecords({ prevCnt, nextCnt }) {\r\n        // //console.log('setNewGridRecords method called ', typeof prevCnt, typeof nextCnt, this.state.gridData);\r\n        //console.log('prevCnt ', prevCnt, 'nxtCnt ', nextCnt);\r\n\r\n        const dataTableRecords = this.state.gridData.slice(prevCnt, nextCnt);\r\n        //console.log(dataTableRecords);\r\n\r\n        if (!dataTableRecords.length) {\r\n            //console.log('You have reached the limit');\r\n            return;\r\n        }\r\n\r\n        this.setState({ dataTableRecords });\r\n\r\n        return dataTableRecords;\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { gridData } = this.props;\r\n        this.setState({ totalRecords: gridData.length, gridData });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setNewGridRecords({ prevCnt: 0, nextCnt: this.props.defaultItems, viewItems: this.props.defaultItems });\r\n    }\r\n\r\n    renderTable() {\r\n        const newGridData = this.state.dataTableRecords ? this.state.dataTableRecords : [];\r\n\r\n        if (newGridData.length) {\r\n            const {direction} = this.state;\r\n            return (\r\n                <div>\r\n                    <h2>Books</h2>\r\n                    {this.state.totalRecords ? (\r\n                        <Pagination\r\n                            gridData={this.state.gridData}\r\n                            defaultItems={5}\r\n                            onSetNewGridRecords={this.setNewGridRecords}\r\n                            handlePrevious={this.handlePrevious}\r\n                            handleNext={this.handleNext}\r\n                        />\r\n                    ) : null\r\n                    }\r\n\r\n                    <div className={this.state.viewItems > 5 ? 'grid-table-panel' : ''}>\r\n                        <table className=\"table table-striped\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <td width=\"10%\"><a href=\"#\" onClick={() => this.sortBy('ID')}>ID <FontAwesomeIcon icon={direction.ID === 'asc' ? 'caret-up' : 'caret-down'} /></a></td>\r\n                                    <td width=\"15%\"><a href=\"#\" onClick={() => this.sortBy('Title')}>Title <FontAwesomeIcon icon={direction.Title === 'asc' ? 'caret-up' : 'caret-down'} /></a></td>\r\n                                    <td width=\"49%\">Description</td>\r\n                                    <td width=\"13%\" className=\"text-center\"><a href=\"#\" onClick={() => this.sortBy('PageCount')}>Page Count <FontAwesomeIcon icon={direction.PageCount === 'asc' ? 'caret-up' : 'caret-down'} /></a></td>\r\n                                    <td width=\"13%\" className=\"text-right\"><a href=\"#\" onClick={() => this.sortBy('PublishDate')}>Publish Date <FontAwesomeIcon icon={direction.PublishDate === 'asc' ? 'caret-up' : 'caret-down'} /></a></td>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"grid-table-panel\">\r\n                                {newGridData.map(item => {\r\n                                    return (\r\n                                        <tr key={item.ID}>\r\n                                            <td>{item.ID}</td>\r\n                                            <td>{item.Title}</td>\r\n                                            <td>{item.Description}</td>\r\n                                            <td className=\"text-center\">{item.PageCount}</td>\r\n                                            <td className=\"text-right\">{new Date(item.PublishDate).getFullYear()}</td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    {this.renderFilter()}\r\n\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderTable()}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DataTable;\r\n","\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport {fab} from '@fortawesome/free-brands-svg-icons';\r\nimport { faCoffee, faCog, faMugHot, faVials, faTimes, faCaretUp, faCaretDown  } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(\r\n    fab, \r\n    faCoffee, \r\n    faCog, \r\n    faMugHot,\r\n    faVials,\r\n    faTimes,\r\n    faCaretUp, \r\n    faCaretDown,\r\n);\r\n","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport API from './api/service';\r\nimport DataTable from './component/DataTable';\r\nimport './App.css';\r\n\r\nimport './fontawesome';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isFilterTrigged: false,\r\n    flashOut: false,\r\n    heading: {\r\n      title: 'Getting your lab ready!',\r\n      icon: ['fas', 'mug-hot']\r\n    },\r\n    fetchedData: [],\r\n    defaultItems: 5\r\n  }\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.showFilter = this.showFilter.bind(this);\r\n    this.closeFilter = this.closeFilter.bind(this);\r\n    this.flashHeader = this.flashHeader.bind(this);\r\n\r\n  }\r\n\r\n  componentWillMount() {\r\n    API.fetchData('Books')\r\n      .then((res) => {\r\n\r\n        this.setState({ fetchedData: res });\r\n\r\n        let heading = this.state.heading;\r\n        heading.title = 'Welcome to Stylish Lab!';\r\n        heading.icon = '';\r\n\r\n        if (res) {\r\n          this.flashHeader();\r\n          this.setState({ heading, flashOut: !this.state.flashOut });\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n  closeFilter(closedStatus) {\r\n    this.setState({ isFilterTrigged: closedStatus })\r\n  }\r\n\r\n  showFilter() {\r\n    this.setState({ isFilterTrigged: !this.state.isFilterTrigged });\r\n  }\r\n\r\n  flashHeader() {\r\n    const body = document.querySelector('body');\r\n    body.classList.add('flash-out');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <header className=\"app-header\">\r\n          <h1>\r\n            {this.state.heading.title}  <br />\r\n            {this.state.heading.icon ? (<FontAwesomeIcon icon={this.state.heading.icon} />) : ''}\r\n          </h1>\r\n\r\n          {\r\n            this.state.flashOut && !this.state.isFilterTrigged ? (\r\n              <a href=\"#\" className=\"filter-icon\" onClick={(e) => { this.showFilter(e) }}><FontAwesomeIcon icon=\"cog\" /></a>\r\n            ) : ''\r\n          }\r\n        </header>\r\n\r\n        <div className=\"container-fluid app-body\">\r\n          {this.state.fetchedData.length ? (\r\n              <DataTable \r\n                gridData={this.state.fetchedData}\r\n                defaultItems={this.state.defaultItems}\r\n                isFilterTrigged={this.state.isFilterTrigged}\r\n                onCloseFilter={this.closeFilter}\r\n              />\r\n          ) : 'No data to display!!'}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './bootstrap.min.css';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}